//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/_Main/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""CharacterActionMaps"",
            ""id"": ""c648da84-0a0f-43b6-a28c-ddef5b477feb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""818bd17d-c0c2-4117-af29-d13d6b229ea2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""05e65d27-a0a4-4cce-a3b6-cc80bce613bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9df88b5b-eef8-40ee-9dd9-d72b6989f10d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""114ecc97-ade3-4b59-8ddd-b4da77be4e00"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""045acf93-9023-4e19-ae04-d2c5c7a05183"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""04dc8363-2d30-4379-9d0a-fc7bebb38794"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""809fc305-78da-48b3-bb91-4f70962550d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6ec1fcd-0965-4798-b682-3747db4df958"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d03f93f-5895-404e-83bb-afd8ab456394"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""9e7c38af-f836-41d5-b3c3-e6297462997c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9dbbc47d-9171-4bd2-8370-fb3cbd63456a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9cc6c57b-2e98-466e-99a4-fbe474d6ba1b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""16809992-983f-44cf-acb2-9e7548ade566"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc66908c-8201-4445-a608-5634f14fd6ef"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7f6f315b-6904-48d8-a037-13bb8835fe12"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3f09ca9-63d2-4654-b3af-3020d2684988"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c643206d-7ef0-4df8-b5b4-a250a3bfbf13"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterActionMaps
        m_CharacterActionMaps = asset.FindActionMap("CharacterActionMaps", throwIfNotFound: true);
        m_CharacterActionMaps_Move = m_CharacterActionMaps.FindAction("Move", throwIfNotFound: true);
        m_CharacterActionMaps_Shoot = m_CharacterActionMaps.FindAction("Shoot", throwIfNotFound: true);
        m_CharacterActionMaps_MouseX = m_CharacterActionMaps.FindAction("MouseX", throwIfNotFound: true);
        m_CharacterActionMaps_MouseY = m_CharacterActionMaps.FindAction("MouseY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterActionMaps
    private readonly InputActionMap m_CharacterActionMaps;
    private ICharacterActionMapsActions m_CharacterActionMapsActionsCallbackInterface;
    private readonly InputAction m_CharacterActionMaps_Move;
    private readonly InputAction m_CharacterActionMaps_Shoot;
    private readonly InputAction m_CharacterActionMaps_MouseX;
    private readonly InputAction m_CharacterActionMaps_MouseY;
    public struct CharacterActionMapsActions
    {
        private @GameInputs m_Wrapper;
        public CharacterActionMapsActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterActionMaps_Move;
        public InputAction @Shoot => m_Wrapper.m_CharacterActionMaps_Shoot;
        public InputAction @MouseX => m_Wrapper.m_CharacterActionMaps_MouseX;
        public InputAction @MouseY => m_Wrapper.m_CharacterActionMaps_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_CharacterActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionMapsActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActionMapsActions instance)
        {
            if (m_Wrapper.m_CharacterActionMapsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnShoot;
                @MouseX.started -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_CharacterActionMapsActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_CharacterActionMapsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public CharacterActionMapsActions @CharacterActionMaps => new CharacterActionMapsActions(this);
    public interface ICharacterActionMapsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
}
